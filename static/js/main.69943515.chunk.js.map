{"version":3,"sources":["components/infoBox/Info-Box.js","util.js","components/map/Map.js","components/table/Table.js","components/lineGraph/LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","data","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","src","flag","alt","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","girdLines","ticks","callback","index","values","LineGraph","useState","setData","useEffect","fetch","then","response","json","chartData","lastDataPoint","date","newDataPoint","x","y","push","bulidChartData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","catch","error","console","log","name","iso2","sortedData","sort","a","b","sortData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.69943515.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./Info.css\";\r\nfunction InfoBox({ title, cases, active, isRed, total, ...props }) {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"}  ${\r\n        isRed && active && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        {/* title */}\r\n        <Typography className=\"infoBox_title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n\r\n        {/* number of cases */}\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases_green\"}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n        {/* total  */}\r\n        <Typography className=\"infoBox__total\">total {total}</Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n// DRAW circles on the map with interactive tooltip\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div className=\"info-flag\">\r\n            <img\r\n              src={country.countryInfo.flag}\r\n              alt={`${country.country} flag`}\r\n            />\r\n          </div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"../../util\";\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='$copy; <a href=\"http://osm.org/copyright\"> OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        girdLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", className }) {\r\n  const [data, setData] = useState({});\r\n  const bulidChartData = (data) => {\r\n    const chartData = [];\r\n    let lastDataPoint = 0;\r\n    for (let date in data.cases) {\r\n      if (lastDataPoint) {\r\n        const newDataPoint = {\r\n          x: date,\r\n          y: data[casesType][date] - lastDataPoint,\r\n        };\r\n        chartData.push(newDataPoint);\r\n      }\r\n      lastDataPoint = data[casesType][date];\r\n      // console.log(\"chart data >>>\", data[\"cases\"][date]);\r\n    }\r\n\r\n    return chartData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        let chartData = bulidChartData(data);\r\n        setData(chartData);\r\n      });\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204,16,52,0.6)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./components/infoBox/Info-Box\";\nimport Map from \"./components/map/Map\";\nimport Table from \"./components/table/Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./components/lineGraph/LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n\n  const [country, setCountry] = useState(\"worldwide\");\n\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n\n  const [mapZoom, setMapZoom] = useState(3);\n\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => setCountryInfo(data))\n      .catch((error) => console.log(error));\n  }, []);\n  useEffect(() => {\n    // https://disease.sh/v3/covid-19/countries\n\n    const getCountriesData = () => {\n      fetch(\" https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          const sortedData = sortData(data);\n\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        })\n        .catch((error) => console.log(error));\n    };\n    getCountriesData();\n  }, []);\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    setCountry(countryCode);\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \" https://disease.sh/v3/covid-19/all\"\n        : ` https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    // ​https://disease.sh/v3/covid-19/all\n\n    // https://disease.sh/v3/covid-19/countries[COUNTRY__CODE]\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        if (countryCode !== \"worldwide\") {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        }\n        setMapZoom(4);\n      });\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19-Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        {/* header */}\n        {/* Title + Select input dropdown field */}\n        <div className=\"app__stats\">\n          {/* InfoBoxs */}\n          <InfoBox\n            active={casesType === \"cases\"}\n            isRed\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n\n          {/* InfoBoxs */}\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          {/* InfoBoxs */}\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n        {/* Map */}\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n        </CardContent>\n        {/* Table */}\n        <Table countries={tableData} />\n        {/* Graph */}\n        <h3 className=\"app_graphTitle\">WorldWide new {casesType}</h3>\n\n        <LineGraph className=\"app__graph\" casesType={casesType} />\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}